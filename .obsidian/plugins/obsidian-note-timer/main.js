/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var crypto = require('crypto');
var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    autoLog: false,
    dateFormat: 'YYYY-MM-DD',
    logDateLinking: 'none',
    msDisplay: true,
    startButtonText: 'Play',
    stopButtonText: 'Stop',
    resetButtonText: 'Reset',
    showResetButton: true,
    continueRunningOnReset: false,
};
class NoteTimer extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.timerInterval = null;
        this.timers = {};
    }
    nextOpenLine(positions, target) {
        // target: identifies the table location
        // +3: next 3 line breaks are md table column titles, and format lines
        return positions[positions.findIndex(n => n > target) + 3];
    }
    readLocalConfig(src, key) {
        let value = src.replace(/\r/g, '').split('\n').find(line => line.startsWith(key + ':'));
        return value && value.replace(key + ':', '').trim();
    }
    isTrue(src, key, setting) {
        if (['true', 'false'].includes(this.readLocalConfig(src, key))) {
            return this.readLocalConfig(src, key) == 'true';
        }
        return setting;
    }
    calculateTotalDuration(logPosition, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            const actFile = this.app.vault.getFiles().find(file => file.path === ctx.sourcePath);
            const curString = yield this.app.vault.read(actFile);
            let lines = curString.replace(/\r/g, '').split('\n');
            let pos = 0;
            let logTitleLine = lines.findIndex(line => {
                pos += line.length + 1; //new line
                return pos > logPosition;
            });
            let total = 0;
            let line = '';
            for (let index = logTitleLine + 3; index < lines.length; index++) {
                line = lines[index];
                if (!line.startsWith('|'))
                    break;
                let matches = line.match(/(?<=(\|[^|]+){2}\|)[^|]+/);
                let value = 0;
                try {
                    value = parseFloat(matches[0].trim()) || 0;
                }
                catch (_a) { }
                total += value;
            }
            const totalTimeText = '\nTotal Time: ' + total.toLocaleString('en-EN', { minimumFractionDigits: 3, maximumFractionDigits: 3 });
            return this.app.vault.modify(actFile, curString.replace(/\nTotal Time: \d+\.\d+/, totalTimeText));
        });
    }
    addToTimerLog(startDate, logPosition, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            const actFile = this.app.vault.getFiles().find(file => file.path === ctx.sourcePath);
            const curString = yield this.app.vault.read(actFile);
            let stopDate = obsidian.moment();
            const durationMs = stopDate.diff(startDate, 'milliseconds');
            const durationtext = (durationMs / (3600 * 1000)).toLocaleString('en-EN', { minimumFractionDigits: 3, maximumFractionDigits: 3 });
            let startDateText = startDate.format(this.settings.dateFormat);
            let stopDateText = stopDate.format(this.settings.dateFormat);
            switch (this.settings.logDateLinking) {
                case 'tag':
                    startDateText = `#${startDateText}`;
                    stopDateText = `#${stopDateText}`;
                    break;
                case 'link':
                    startDateText = `[[${startDateText}]]`;
                    stopDateText = `[[${stopDateText}]]`;
            }
            const newLinePositions = [];
            for (let c = 0; c < curString.length; c++) {
                // creates an array of all new line positions
                if (curString[c] == '\n')
                    newLinePositions.push(c);
            }
            const curStringPart1 = curString.slice(0, this.nextOpenLine(newLinePositions, logPosition));
            const curStringPart2 = curString.slice(this.nextOpenLine(newLinePositions, logPosition), curString.length);
            const logEntry = `\n| ${startDateText} | ${stopDateText} | ${durationtext} |  |`;
            return this.app.vault.modify(actFile, curStringPart1 + logEntry + curStringPart2);
        });
    }
    createNewTimerLog(ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            const actFile = this.app.vault.getFiles().find(file => file.path === ctx.sourcePath);
            const curString = yield this.app.vault.read(actFile);
            const timerBlockStart = curString.toLowerCase().search("```timer");
            const timerBlockEnd = curString.slice(timerBlockStart, curString.length).indexOf("```", 3) + 3;
            const curStringPart1 = curString.slice(0, timerBlockStart + timerBlockEnd);
            const curStringPart2 = curString.slice(timerBlockStart + timerBlockEnd, curString.length);
            const tableStr = `\n###### Timer Log\nTotal Time: 0.000\n| Start | Stop | Duration | Comments |\n| ----- | ---- | -------- | ------- |`;
            return this.app.vault.modify(actFile, curStringPart1 + tableStr + curStringPart2);
        });
    }
    saveTimerUID(ctx, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const actFile = this.app.vault.getFiles().find(file => file.path === ctx.sourcePath);
            const curString = yield this.app.vault.read(actFile);
            const timerBlockStart = curString.toLowerCase().search("```timer");
            const timerBlockEnd = curString.slice(timerBlockStart, curString.length).indexOf("```", 3);
            const curStringPart1 = curString.slice(0, timerBlockStart + timerBlockEnd);
            const curStringPart2 = curString.slice(timerBlockStart + timerBlockEnd, curString.length);
            const idString = `_timerUID:${id}\n`;
            return this.app.vault.modify(actFile, curStringPart1 + idString + curStringPart2);
        });
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new NoteTimerSettingsTab(this.app, this));
            this.registerMarkdownCodeBlockProcessor("timer", (src, el, ctx) => {
                let uid = this.readLocalConfig(src, '_timerUID');
                if (!uid) {
                    uid = crypto.randomUUID();
                    this.saveTimerUID(ctx, uid);
                    this.timers[uid] = {
                        id: uid,
                        status: 'stopped',
                        startDate: null,
                        timer: null
                    };
                }
                if (!this.timers[uid]) {
                    this.timers[uid] = {
                        id: uid,
                        status: 'stopped',
                        startDate: null,
                        timer: null
                    };
                }
                const currentTimer = this.timers[uid];
                const updateTime = () => {
                    if (currentTimer.status == 'stopped')
                        return timeDisplay.setText('-:-:-');
                    let start = obsidian.moment(currentTimer.startDate);
                    let now = obsidian.moment();
                    const days = now.diff(start, 'days');
                    start.add(days, 'days');
                    const hours = now.diff(start, 'hours');
                    start.add(hours, 'hours');
                    const minutes = now.diff(start, 'minutes');
                    start.add(minutes, 'minutes');
                    const seconds = now.diff(start, 'seconds');
                    start.add(seconds, 'seconds');
                    const milliseconds = now.diff(start, 'milliseconds');
                    start.add(milliseconds, 'milliseconds');
                    function format(value, digits = 2) {
                        return String(value).padStart(digits, '0');
                    }
                    timeDisplay.setText((days > 0 ? days + ':' : '')
                        + format(hours)
                        + ':' + format(minutes)
                        + ':' + format(seconds)
                        + (this.isTrue(src, 'ms', this.settings.msDisplay) ? '.' + format(milliseconds, 3) : ''));
                };
                const timerControl = () => {
                    if (currentTimer.status == 'running') {
                        window.clearInterval(currentTimer.timer);
                        currentTimer.timer = window.setInterval(() => {
                            updateTime();
                        }, 10);
                        this.registerInterval(currentTimer.timer);
                    }
                    else {
                        window.clearInterval(currentTimer.timer);
                    }
                };
                const timeDisplay = el.createEl("span", { text: '-:-:-' });
                const buttonDiv = el.createDiv({ cls: "timer-button-group" });
                const start = buttonDiv.createEl("button", { text: this.readLocalConfig(src, 'startButtonText') || this.settings.startButtonText, cls: "timer-start" });
                const stop = buttonDiv.createEl("button", { text: this.readLocalConfig(src, 'stopButtonText') || this.settings.stopButtonText, cls: "timer-pause" });
                const reset = this.isTrue(src, 'showResetButton', this.settings.showResetButton) && buttonDiv.createEl("button", { text: this.readLocalConfig(src, 'resetButtonText') || this.settings.resetButtonText, cls: "timer-reset" });
                if (currentTimer.status == 'running') {
                    timerControl();
                    start.disabled = true;
                    stop.disabled = false;
                }
                else {
                    start.disabled = false;
                    stop.disabled = true;
                }
                start.onclick = () => {
                    currentTimer.startDate = new Date();
                    currentTimer.status = 'running';
                    timerControl();
                    start.disabled = true;
                    stop.disabled = false;
                };
                stop.onclick = () => __awaiter(this, void 0, void 0, function* () {
                    let stopTime = obsidian.moment(currentTimer.startDate);
                    currentTimer.startDate = null;
                    currentTimer.status = 'stopped';
                    timerControl();
                    timeDisplay.setText('-:-:-');
                    start.disabled = false;
                    stop.disabled = true;
                    let area = ctx.getSectionInfo(el).text;
                    let logPosition = area.search("# Timer Log");
                    if (logPosition <= 0) {
                        yield this.createNewTimerLog(ctx);
                        area = ctx.getSectionInfo(el).text;
                        logPosition = area.search("# Timer Log");
                    }
                    yield this.addToTimerLog(stopTime, logPosition, ctx);
                    yield this.calculateTotalDuration(logPosition, ctx);
                });
                if (reset) {
                    reset.onclick = () => {
                        if (this.settings.continueRunningOnReset && currentTimer.status == 'running') {
                            currentTimer.startDate = new Date;
                        }
                        else {
                            currentTimer.startDate = null;
                            currentTimer.status = 'stopped';
                            timerControl();
                            timeDisplay.setText('-:-:-');
                            start.disabled = false;
                            stop.disabled = true;
                        }
                    };
                }
            });
        });
    }
    onunload() {
        console.log('unloading plugin');
        this.timers = {};
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class NoteTimerSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Obsidian Note Timer Settings' });
        containerEl.createEl('p', { text: `Find the documentation ` }).createEl('a', { text: `here`, href: `https://github.com/davidvdev/obsidian-note-timer#readme` });
        new obsidian.Setting(containerEl)
            .setName('Display Milleseconds')
            .setDesc('Turn off to display HH:MM:SS')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.msDisplay)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.msDisplay = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Log by default')
            .setDesc('Enables the log button and automatically creates a markdown table below the timer to store the date, timer duration, and an empty cell for comments.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.autoLog)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.autoLog = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Log Date Format')
            .setDesc('select a date format')
            .addText(text => text
            .setPlaceholder(String(DEFAULT_SETTINGS.dateFormat))
            .setValue(this.plugin.settings.dateFormat)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.dateFormat = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Log Date Linking')
            .setDesc('automatically insert wikilinks, tags, or nothing to dates')
            .addDropdown(dropdown => dropdown
            .addOption('none', 'none')
            .addOption('tag', '#tag')
            .addOption('link', '[[link]]')
            .setValue(this.plugin.settings.logDateLinking)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.logDateLinking = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Start Button Text')
            .setDesc('Display text for the Start button')
            .addText(text => text
            .setPlaceholder(String(DEFAULT_SETTINGS.startButtonText))
            .setValue(this.plugin.settings.startButtonText)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.startButtonText = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Stop Button Text')
            .setDesc('Display text for the Stop button')
            .addText(text => text
            .setPlaceholder(String(DEFAULT_SETTINGS.stopButtonText))
            .setValue(this.plugin.settings.stopButtonText)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.stopButtonText = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Reset Button Text')
            .setDesc('Display text for the Reset button')
            .addText(text => text
            .setPlaceholder(String(DEFAULT_SETTINGS.resetButtonText))
            .setValue(this.plugin.settings.resetButtonText)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.resetButtonText = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Continue running on reset')
            .setDesc('If this is active, the timer will keep running after a reset.')
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.continueRunningOnReset)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.continueRunningOnReset = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Donate')
            .setDesc('If you like this Plugin, please consider donating:')
            .addButton(button => button
            .buttonEl.outerHTML = `<a href='https://ko-fi.com/S6S55K9XD' target='_blank'><img height='36' style='border:0px;height:36px;' src='https://cdn.ko-fi.com/cdn/kofi3.png?v=3' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>`);
    }
}

module.exports = NoteTimer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
